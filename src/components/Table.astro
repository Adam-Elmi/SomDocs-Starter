---
type Props = {
    headers: string[];
    body: { row: string[] }[];
    width: string | number;
};
const { headers, body, width = "100%" } = Astro.props as Props;
---

<div
    class={`w-[${width}] overflow-auto max-h-[500px] rounded-xl shadow-md border border-slate-300 dark:border-gray-800`}
>
   
    <table class="min-w-full border-collapse text-sm text-left text-gray-600 dark:text-gray-300 dark:bg-[#0c0c0c]">
       <thead>
         <tr class="dark:bg-[#121212] border-b border-b-slate-300 dark:border-gray-700 sticky top-0 z-10">
           {
             headers && headers.length > 0
               ? headers.map((header) => (
                   <th class="px-4 py-3 font-semibold text-sm uppercase tracking-wide text-gray-400 dark:bg-[#121212]">
                     {header}
                   </th>
                 ))
               : null
           }
         </tr>
       </thead>
       <tbody>
         {
           body && body.length > 0
             ? body.map((data, i) => (
                 <tr class={i % 2 === 0 ? "dark:bg-[#101010] bg-slate-50 hover:bg-slate-200 dark:hover:bg-[#161616]" : "dark:bg-[#0f0f0f] bg-slate-100 hover:bg-slate-200 dark:hover:bg-[#161616]"}>
                   {
                     data.row && data.row.length > 0
                       ? data.row.map((rowData) => (
                           <td class="px-4 py-3 border-b border-b-slate-300 dark:border-gray-800 whitespace-nowrap">
                             {rowData}
                           </td>
                         ))
                       : null
                   }
                 </tr>
               ))
             : null
         }
       </tbody>
     </table>
</div>
